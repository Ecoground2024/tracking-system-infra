services:

  discovery:
    build: ./discovery
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - tracking-network
    restart: unless-stopped

config-server:
  build: ./tracking-config-server
  container_name: config-server
  ports:
    - "8888:8888"
  depends_on:
    - discovery
  # usa profile "native" e aponta pro diret√≥rio montado
  environment:
    SPRING_PROFILES_ACTIVE: native
    SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: file:/config
  volumes:
    - ./system-config-repo:/config:ro
  networks:
    - tracking-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "-fsS", "http://localhost:8888/actuator/health"]
    interval: 5s
    timeout: 3s
    retries: 20
    start_period: 10s

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: foracesso
      POSTGRES_USER: root
      POSTGRES_PASSWORD: b@ncoPostgr3SQL
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - tracking-network
    restart: unless-stopped

  rabbitmq:
    build: ./messaging-broker
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - tracking-network
    restart: unless-stopped

  foracesso-module:
    build: ./foracesso-module
    container_name: foracesso-module
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_started
    env_file:
      - ./.env
    environment:
      SPRING_APPLICATION_NAME: "foracesso-module"
      SPRING_CONFIG_IMPORT: "optional:configserver:"
      SPRING_CLOUD_CONFIG_URI: "http://config-server:8888"
    networks:
      - tracking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8081/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 15s

  rules-service:
    build: ./rules-service
    container_name: rules-service
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_started
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_started
      foracesso-module:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      SPRING_APPLICATION_NAME: "rules-service"
      SPRING_CONFIG_IMPORT: "optional:configserver:"
      SPRING_CLOUD_CONFIG_URI: "http://config-server:8888"
    networks:
      - tracking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8082/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 15s

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8080:8080"
    depends_on:
      discovery:
        condition: service_started
      rabbitmq:
        condition: service_started
      rules-service:
        condition: service_healthy
      foracesso-module:
        condition: service_healthy
    networks:
      - tracking-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - discovery
      - rules-service
      - gateway
      - foracesso-module
    networks:
      - tracking-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - tracking-network
    restart: unless-stopped

  redis:
    build: ./redis
    container_name: redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - tracking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

networks:
  tracking-network:
    name: tracking-network
